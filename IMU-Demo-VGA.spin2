{
    --------------------------------------------
    Filename: IMU-Demo-VGA.spin2
    Author: Jesse Burt
    Description: Visual representation of IMU data output
    Copyright (c) 2020
    Started Jun 12, 2020
    Updated Jun 22, 2020
    See end of file for terms of use.
    --------------------------------------------
}
' Uncomment one of the following to choose which IMU the demo runs with
#define MPU9250_I2C
'#define MPU9250_SPI    NOT IMPLEMENTED YET
'#define LSM9DS1_SPI

CON

    _xtlfreq        = cfg._xtlfreq
    _clkfreq        = 250_000_000

    WIDTH           = 320
    HEIGHT          = 240
    XMAX            = WIDTH-1
    YMAX            = HEIGHT-1
    CENTERX         = WIDTH/2
    CENTERY         = HEIGHT/2
    BUFFSZ          = WIDTH * HEIGHT
    BPP             = 1
    BPL             = WIDTH * BPP

' -- User-modifiable constants
    SER_RX          = cfg.SER_RX
    SER_TX          = cfg.SER_TX
    SER_BAUD        = 2_000_000
    LED             = cfg.LED1

    VGA_BASEPIN     = 0                                         ' 0, 8, 16, 24, 32, 40, 48

' MPU9250
    SCL_PIN         = 32                                        ' SPI, I2C
    SDA_PIN         = 33                                        ' SPI, I2C
    I2C_HZ          = 400_000                                   ' I2C

' LSM9DS1
    CS_AG_PIN       = 34
    CS_M_PIN        = 35
    SDIO_PIN        = 33
    INT_AG_PIN      = 24
    INT_M_PIN       = 25
    SCK_FREQ        = 5_000_000
' --

OBJ

    cfg     : "core.con.boardcfg.p2eval"
    ser     : "com.serial.terminal.ansi"
    time    : "time"
    io      : "io"
    int     : "string.integer"
#ifdef MPU9250_I2C
    imu     : "sensor.imu.9dof.mpu9250.i2c"
#elseifdef LSM9DS1_SPI
    imu     : "sensor.imu.9dof.lsm9ds1.3wspi"
#endif
    vga     : "display.vga.bitmap-8bpp"
    fnt     : "font.5x8"

VAR

    long _palette[256]
    long _gdiv
    long _imu_name[3]
    word _ascl, _gscl
    byte _framebuffer[BUFFSZ]
    byte _offscreen[BUFFSZ]
    byte _gcx, _gcy, _gcz

PUB Main()

    vga.SetTimings(10, 33, 16, 96, 48, 640)
    setup()
    updateSettings()

    vga.fgcolor(WHITE)
    repeat
        vga.waitvsync()
'        GyroRay()
        AccelRay()
        vga.update()
        vga.clear()

    flashled(LED, 100)

PUB AccelRay() | ax, ay, az, sx, sy, sz

    vga.position(0, 1)
    vga.printf("Raw accelerometer data output (%s)", _imu_name)
    imu.acceldata(@ax, @ay, @az)
    sx := ax / 256
    sy := ay / 256
    sz := az / 256

    vga.position(0, 2)
    vga.printf("Scale: %dg\n", _ascl)
    vga.fgcolor(REDMAX)
    vga.printf("X: ")
    vga.fgcolor(WHITE)
    vga.dec(ax)

    vga.fgcolor(GREENMAX)
    vga.printf("\nY: ")
    vga.fgcolor(WHITE)
    vga.dec(ay)

    vga.fgcolor(BLUEMAX)
    vga.printf("\nZ: ")
    vga.fgcolor(WHITE)
    vga.dec(az)

    vga.line(CENTERX, CENTERY, CENTERX, CENTERY+sx, REDMAX)
    vga.line(CENTERX, CENTERY, CENTERX+sy, CENTERY, GREENMAX)
    vga.line(CENTERX, CENTERY, CENTERX+sz, CENTERY+sz, BLUEMAX)
    vga.circle(CENTERX, CENTERY+sx, 5, REDMAX)
    vga.circle(CENTERX+sy, CENTERY, 5, GREENMAX)
    vga.circle(CENTERX+sz, CENTERY+sz, 5, BLUEMAX)

PUB GyroRay() | gx, gy, gz, xsx, xsy, ysx, ysy, zsx, zsy, xdiv, ydiv, zdiv, xr, yr, zr

    vga.fgcolor(WHITE)
    vga.position(0, 1)
    vga.printf("Raw gyroscope data output (%s)", _imu_name)
    xdiv := HEIGHT * 4
    ydiv := HEIGHT * 4
    zdiv := HEIGHT * 4

    imu.gyrodata(@gx, @gy, @gz)
    
    xsx := CENTERX + cos(gx) / xdiv
    xsy := CENTERY + sin(gx) / xdiv/4
    xr := xsy / 16                                          ' Change the y-radius of the circle depending on position, to give a little sense of depth

    ysx := CENTERX + cos(gy) / ydiv/4
    ysy := CENTERY + sin(gy) / ydiv
    yr := ysx / 16                                          ' Change the x-radius of the circle depending on position, to give a little sense of depth

    zsx := CENTERX + cos(gz) / zdiv
    zsy := CENTERY + sin(gz) / zdiv

    vga.position(0, 2)
    vga.printf("Scale: %ddps\n", _gscl)
    vga.fgcolor(REDMAX)
    vga.printf("X: ")
    vga.fgcolor(WHITE)
    vga.dec(gx)

    vga.fgcolor(GREENMAX)
    vga.printf("\nY: ")
    vga.fgcolor(WHITE)
    vga.dec(gy)

    vga.fgcolor(BLUEMAX)
    vga.printf("\nZ: ")
    vga.fgcolor(WHITE)
    vga.dec(gz)

    vga.line(CENTERX, CENTERY, xsx, xsy, REDMAX)            ' Lines radiating from screen center to an
    vga.line(CENTERX, CENTERY, ysx, ysy, GREENMAX)          '   elliptical path around the center
    vga.line(CENTERX, CENTERY, zsx, zsy, BLUEMAX)
    vga.circle(xsx, xsy, xr, REDMAX)                        ' Circles drawn at line endpoints
    vga.circle(ysx, ysy, yr, GREENMAX)
    vga.circle(zsx, zsy, 5, BLUEMAX)

PUB UpdateSettings()

    imu.accelscale(_ascl)                                   ' 2, 4, 8, 16 (g's)
    imu.accelaxisenabled(%111)                              ' 0 or 1 for each bit (%xyz)
#ifdef LSM9DS1
    imu.accelbias(0, 0, 0, 1)                               ' XXX Not yet functional for MPU9250
#endif
    imu.gyroscale(_gscl)                                    ' 250, 500, 1000, 2000
    imu.gyroaxisenabled(%111)                               ' 0 or 1 for each bit (%xyz)
    imu.gyrobias(0, 0, 0, 1)                                ' x, y, z: 0..65535, rw = 1 (write)
    imu.magscale(16)                                        ' 14, 16 (bits)

    _gcx := REDMIN+32                                       ' Gyro display color X-axis
    _gcy := GREENMIN+32                                     ' Gyro display color Y-axis
    _gcz := BLUEMIN+32                                      ' Gyro display color Z-axis

PRI Cos(angle): tmp
' Return the cosine of angle
    asm
        shl     angle, #20
        qrotate ##100000, angle
        getqx   tmp
    endasm
    return

PRI Sin(angle): tmp
' Return the sine of angle
    asm
        shl     angle, #20
        qrotate ##100000, angle
        getqy   tmp
    endasm
    return

PUB Setup()

    repeat until ser.startrxtx (SER_RX, SER_TX, 0, SER_BAUD)
    time.msleep(30)
    ser.clear()
    ser.printf("Serial terminal started\n")

#ifdef MPU9250_I2C
    _imu_name := string("MPU9250")
    if imu.start(SCL_PIN, SDA_PIN, I2C_HZ)
        imu.defaults()
        ser.printf("MPU9250 driver started (I2C)\n")
    else
        ser.printf("MPU9250 driver failed to start - halting\n")
        imu.stop()
        time.msleep(5)
        flashled(LED, 500)
#elseifdef LSM9DS1_SPI
    _imu_name := string("LSM9DS1")
    if imu.Start (SCL_PIN, SDIO_PIN, CS_AG_PIN, CS_M_PIN, INT_AG_PIN, INT_M_PIN, SCK_FREQ)
        ser.printf("LSM9DS1 driver started (SPI)\n")
    else
        ser.printf("LSM9DS1 driver failed to start- halting\n")
        FlashLED(LED, 500)
#endif

    setuppalette()
    if vga.start(VGA_BASEPIN, @_framebuffer, @_palette, WIDTH, HEIGHT)
        ser.printf("VGA 8bpp driver started\n")
        vga.drawto(@_offscreen)
        vga.fontaddress(fnt.BaseAddr())
        vga.fontsize(6, 8)
        vga.clear
        vga.fgcolor(WHITE)
        vga.position(0, 0)
        vga.printf("Ready.")
        vga.update
    else
        ser.printf("VGA 8bpp driver failed to start\n")
        repeat

    _ascl := 2
    _gscl := 2000

PRI SetupPalette() | i, r, g, b, c
' Set up palette
    r := 0
    g := 0
    b := 0

    repeat i from 0 to 255
        c := 0 | (r << 16) | (g << 8) | b
        _palette[i] := c

        case i
            0..63:                                          ' Red
                r += 4
                g := 0
                b := 0
            64..127:                                        ' Green
                r := 0
                g += 4
                b := 0
            128..191:                                       ' Blue
                r := 0
                g := 0
                b += 4
            192..253:                                       ' Yellow
                r += 4
                g += 4
                b := 0
            254..255:                                       ' White
                r := 255
                g := 255
                b := 255

CON

    REDMIN      = 0
    REDMAX      = 63
    GREENMIN    = 64
    GREENMAX    = 127
    BLUEMIN     = 128
    BLUEMAX     = 191
    YELLOWMIN   = 192
    YELLOWMAX   = 253
    WHITE       = 255

#include "lib.utility.spin2"

DAT
{
    --------------------------------------------------------------------------------------------------------
    TERMS OF USE: MIT License

    Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
    associated documentation files (the "Software"), to deal in the Software without restriction, including
    without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the
    following conditions:

    The above copyright notice and this permission notice shall be included in all copies or substantial
    portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT
    LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
    WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
    --------------------------------------------------------------------------------------------------------
}
